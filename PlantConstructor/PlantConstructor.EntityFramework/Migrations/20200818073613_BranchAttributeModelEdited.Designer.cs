// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantConstructor.EntityFramework;

namespace PlantConstructor.EntityFramework.Migrations
{
    [DbContext(typeof(PlantConstructorDbContext))]
    [Migration("20200818073613_BranchAttributeModelEdited")]
    partial class BranchAttributeModelEdited
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZoneFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneFKId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BranchAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchAttributeFKId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchAttributeFKId");

                    b.HasIndex("BranchFKId");

                    b.ToTable("BranchAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PipeFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PipeFKId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFKId");

                    b.ToTable("PartAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartAttributeFKId")
                        .HasColumnType("int");

                    b.Property<int?>("PartFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartAttributeFKId");

                    b.HasIndex("PartFKId");

                    b.ToTable("PartAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.Pipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchFKId")
                        .HasColumnType("int");

                    b.Property<string>("PipeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchFKId");

                    b.ToTable("Pipes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PipeAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFKId");

                    b.ToTable("PipeAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PipeFKId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteAttributeFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PipeFKId");

                    b.HasIndex("SiteAttributeFKId");

                    b.ToTable("PipeAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectGroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectFKId")
                        .HasColumnType("int");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFKId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectFKId")
                        .HasColumnType("int");

                    b.Property<string>("SiteAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFKId");

                    b.ToTable("SiteAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteAttributeFKId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteAttributeFKId");

                    b.HasIndex("SiteFKId");

                    b.ToTable("SiteAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SiteFKId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SiteFKId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectFKId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFKId");

                    b.ToTable("ZoneAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZoneAttributeFKId")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneAttributeFKId");

                    b.HasIndex("ZoneFKId");

                    b.ToTable("ZoneAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.Branch", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.ZoneModel.Zone", "ZoneFK")
                        .WithMany()
                        .HasForeignKey("ZoneFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.BranchModel.BranchAttribute", "BranchAttributeFK")
                        .WithMany()
                        .HasForeignKey("BranchAttributeFKId");

                    b.HasOne("PlantConstructor.Domain.Model.BranchModel.Branch", "BranchFK")
                        .WithMany()
                        .HasForeignKey("BranchFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.Part", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.PipeModel.Pipe", "PipeFK")
                        .WithMany()
                        .HasForeignKey("PipeFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.PartModel.PartAttribute", "PartAttributeFK")
                        .WithMany()
                        .HasForeignKey("PartAttributeFKId");

                    b.HasOne("PlantConstructor.Domain.Model.PartModel.Part", "PartFK")
                        .WithMany()
                        .HasForeignKey("PartFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.Pipe", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.BranchModel.Branch", "BranchFK")
                        .WithMany()
                        .HasForeignKey("BranchFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.PipeModel.Pipe", "PipeFK")
                        .WithMany()
                        .HasForeignKey("PipeFKId");

                    b.HasOne("PlantConstructor.Domain.Model.PipeModel.PipeAttribute", "SiteAttributeFK")
                        .WithMany()
                        .HasForeignKey("SiteAttributeFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.Site", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.SiteModel.SiteAttribute", "SiteAttributeFK")
                        .WithMany()
                        .HasForeignKey("SiteAttributeFKId");

                    b.HasOne("PlantConstructor.Domain.Model.SiteModel.Site", "SiteFK")
                        .WithMany()
                        .HasForeignKey("SiteFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.Zone", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.SiteModel.Site", "SiteFK")
                        .WithMany()
                        .HasForeignKey("SiteFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKId");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.ZoneModel.ZoneAttribute", "ZoneAttributeFK")
                        .WithMany()
                        .HasForeignKey("ZoneAttributeFKId");

                    b.HasOne("PlantConstructor.Domain.Model.ZoneModel.Zone", "ZoneFK")
                        .WithMany()
                        .HasForeignKey("ZoneFKId");
                });
#pragma warning restore 612, 618
        }
    }
}
