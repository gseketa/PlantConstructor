// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantConstructor.EntityFramework;

namespace PlantConstructor.EntityFramework.Migrations
{
    [DbContext(typeof(PlantConstructorDbContext))]
    [Migration("20200809093017_ModelCreated")]
    partial class ModelCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PlantConstructor.WPF.Model.BranchModel.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZoneFKZoneID")
                        .HasColumnType("int");

                    b.HasKey("BranchID");

                    b.HasIndex("ZoneFKZoneID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.BranchModel.BranchAttribute", b =>
                {
                    b.Property<int>("BranchAttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectFKProjectID")
                        .HasColumnType("int");

                    b.HasKey("BranchAttributeID");

                    b.HasIndex("ProjectFKProjectID");

                    b.ToTable("BranchAttributes");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.BranchModel.BranchAttributeValue", b =>
                {
                    b.Property<int>("BranchAttributeValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchAttributeFKBranchAttributeID")
                        .HasColumnType("int");

                    b.Property<int?>("BranchFKBranchID")
                        .HasColumnType("int");

                    b.HasKey("BranchAttributeValueID");

                    b.HasIndex("BranchAttributeFKBranchAttributeID");

                    b.HasIndex("BranchFKBranchID");

                    b.ToTable("BranchAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PartModel.Part", b =>
                {
                    b.Property<int>("PartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PipeFKPipeID")
                        .HasColumnType("int");

                    b.HasKey("PartID");

                    b.HasIndex("PipeFKPipeID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PartModel.PartAttribute", b =>
                {
                    b.Property<int>("PartAttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectFKProjectID")
                        .HasColumnType("int");

                    b.HasKey("PartAttributeID");

                    b.HasIndex("ProjectFKProjectID");

                    b.ToTable("PartAttributes");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PartModel.PartAttributeValue", b =>
                {
                    b.Property<int>("PartAttributeValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartAttributeFKPartAttributeID")
                        .HasColumnType("int");

                    b.Property<int?>("PartFKPartID")
                        .HasColumnType("int");

                    b.HasKey("PartAttributeValueID");

                    b.HasIndex("PartAttributeFKPartAttributeID");

                    b.HasIndex("PartFKPartID");

                    b.ToTable("PartAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PipeModel.Pipe", b =>
                {
                    b.Property<int>("PipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchFKBranchID")
                        .HasColumnType("int");

                    b.Property<string>("PipeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PipeID");

                    b.HasIndex("BranchFKBranchID");

                    b.ToTable("Pipes");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PipeModel.PipeAttribute", b =>
                {
                    b.Property<int>("PipeAttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PipeAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectFKProjectID")
                        .HasColumnType("int");

                    b.HasKey("PipeAttributeID");

                    b.HasIndex("ProjectFKProjectID");

                    b.ToTable("PipeAttributes");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PipeModel.PipeAttributeValue", b =>
                {
                    b.Property<int>("PipeAttributeValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PipeFKPipeID")
                        .HasColumnType("int");

                    b.Property<int?>("SiteAttributeFKPipeAttributeID")
                        .HasColumnType("int");

                    b.HasKey("PipeAttributeValueID");

                    b.HasIndex("PipeFKPipeID");

                    b.HasIndex("SiteAttributeFKPipeAttributeID");

                    b.ToTable("PipeAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.SiteModel.Site", b =>
                {
                    b.Property<int>("SiteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectFKProjectID")
                        .HasColumnType("int");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiteID");

                    b.HasIndex("ProjectFKProjectID");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.SiteModel.SiteAttribute", b =>
                {
                    b.Property<int>("SiteAttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectFKProjectID")
                        .HasColumnType("int");

                    b.Property<string>("SiteAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiteAttributeID");

                    b.HasIndex("ProjectFKProjectID");

                    b.ToTable("SiteAttributes");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.SiteModel.SiteAttributeValue", b =>
                {
                    b.Property<int>("SiteAttributeValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteAttributeFKSiteAttributeID")
                        .HasColumnType("int");

                    b.Property<int?>("SiteFKSiteID")
                        .HasColumnType("int");

                    b.HasKey("SiteAttributeValueID");

                    b.HasIndex("SiteAttributeFKSiteAttributeID");

                    b.HasIndex("SiteFKSiteID");

                    b.ToTable("SiteAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.ZoneModel.Zone", b =>
                {
                    b.Property<int>("ZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SiteFKSiteID")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneID");

                    b.HasIndex("SiteFKSiteID");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.ZoneModel.ZoneAttribute", b =>
                {
                    b.Property<int>("ZoneAttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectFKProjectID")
                        .HasColumnType("int");

                    b.Property<string>("ZoneAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneAttributeID");

                    b.HasIndex("ProjectFKProjectID");

                    b.ToTable("ZoneAttributes");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.ZoneModel.ZoneAttributeValue", b =>
                {
                    b.Property<int>("ZoneAttributeValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZoneAttributeFKZoneAttributeID")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneFKZoneID")
                        .HasColumnType("int");

                    b.HasKey("ZoneAttributeValueID");

                    b.HasIndex("ZoneAttributeFKZoneAttributeID");

                    b.HasIndex("ZoneFKZoneID");

                    b.ToTable("ZoneAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.BranchModel.Branch", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.ZoneModel.Zone", "ZoneFK")
                        .WithMany()
                        .HasForeignKey("ZoneFKZoneID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.BranchModel.BranchAttribute", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKProjectID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.BranchModel.BranchAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.BranchModel.BranchAttribute", "BranchAttributeFK")
                        .WithMany()
                        .HasForeignKey("BranchAttributeFKBranchAttributeID");

                    b.HasOne("PlantConstructor.WPF.Model.BranchModel.Branch", "BranchFK")
                        .WithMany()
                        .HasForeignKey("BranchFKBranchID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PartModel.Part", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.PipeModel.Pipe", "PipeFK")
                        .WithMany()
                        .HasForeignKey("PipeFKPipeID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PartModel.PartAttribute", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKProjectID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PartModel.PartAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.PartModel.PartAttribute", "PartAttributeFK")
                        .WithMany()
                        .HasForeignKey("PartAttributeFKPartAttributeID");

                    b.HasOne("PlantConstructor.WPF.Model.PartModel.Part", "PartFK")
                        .WithMany()
                        .HasForeignKey("PartFKPartID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PipeModel.Pipe", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.BranchModel.Branch", "BranchFK")
                        .WithMany()
                        .HasForeignKey("BranchFKBranchID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PipeModel.PipeAttribute", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKProjectID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.PipeModel.PipeAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.PipeModel.Pipe", "PipeFK")
                        .WithMany()
                        .HasForeignKey("PipeFKPipeID");

                    b.HasOne("PlantConstructor.WPF.Model.PipeModel.PipeAttribute", "SiteAttributeFK")
                        .WithMany()
                        .HasForeignKey("SiteAttributeFKPipeAttributeID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.SiteModel.Site", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKProjectID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.SiteModel.SiteAttribute", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKProjectID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.SiteModel.SiteAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.SiteModel.SiteAttribute", "SiteAttributeFK")
                        .WithMany()
                        .HasForeignKey("SiteAttributeFKSiteAttributeID");

                    b.HasOne("PlantConstructor.WPF.Model.SiteModel.Site", "SiteFK")
                        .WithMany()
                        .HasForeignKey("SiteFKSiteID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.ZoneModel.Zone", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.SiteModel.Site", "SiteFK")
                        .WithMany()
                        .HasForeignKey("SiteFKSiteID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.ZoneModel.ZoneAttribute", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.Project", "ProjectFK")
                        .WithMany()
                        .HasForeignKey("ProjectFKProjectID");
                });

            modelBuilder.Entity("PlantConstructor.WPF.Model.ZoneModel.ZoneAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.WPF.Model.ZoneModel.ZoneAttribute", "ZoneAttributeFK")
                        .WithMany()
                        .HasForeignKey("ZoneAttributeFKZoneAttributeID");

                    b.HasOne("PlantConstructor.WPF.Model.ZoneModel.Zone", "ZoneFK")
                        .WithMany()
                        .HasForeignKey("ZoneFKZoneID");
                });
#pragma warning restore 612, 618
        }
    }
}
