// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantConstructor.EntityFramework;

namespace PlantConstructor.EntityFramework.Migrations
{
    [DbContext(typeof(PlantConstructorDbContext))]
    [Migration("20200818094010_EditedForegnKeysinAllModels")]
    partial class EditedForegnKeysinAllModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BranchAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchAttributeId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PipeId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PartAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartAttributeId");

                    b.HasIndex("PartId");

                    b.ToTable("PartAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.Pipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("PipeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Pipes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PipeAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PipeAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PipeId")
                        .HasColumnType("int");

                    b.Property<int>("PiteAttributeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PipeId");

                    b.HasIndex("PiteAttributeId");

                    b.ToTable("PipeAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectGroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SiteAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SiteAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteAttributeId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ZoneAttributes");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneAttributeId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneAttributeValues");
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.Branch", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.ZoneModel.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.BranchModel.BranchAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.BranchModel.BranchAttribute", "BranchAttribute")
                        .WithMany()
                        .HasForeignKey("BranchAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantConstructor.Domain.Model.BranchModel.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.Part", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.PipeModel.Pipe", "Pipe")
                        .WithMany()
                        .HasForeignKey("PipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PartModel.PartAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.PartModel.PartAttribute", "PartAttribute")
                        .WithMany()
                        .HasForeignKey("PartAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantConstructor.Domain.Model.PartModel.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.Pipe", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.BranchModel.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.PipeModel.PipeAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.PipeModel.Pipe", "Pipe")
                        .WithMany()
                        .HasForeignKey("PipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantConstructor.Domain.Model.PipeModel.PipeAttribute", "PiteAttribute")
                        .WithMany()
                        .HasForeignKey("PiteAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.Site", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.SiteModel.SiteAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.SiteModel.SiteAttribute", "SiteAttribute")
                        .WithMany()
                        .HasForeignKey("SiteAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantConstructor.Domain.Model.SiteModel.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.Zone", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.SiteModel.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttribute", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantConstructor.Domain.Model.ZoneModel.ZoneAttributeValue", b =>
                {
                    b.HasOne("PlantConstructor.Domain.Model.ZoneModel.ZoneAttribute", "ZoneAttribute")
                        .WithMany()
                        .HasForeignKey("ZoneAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantConstructor.Domain.Model.ZoneModel.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
